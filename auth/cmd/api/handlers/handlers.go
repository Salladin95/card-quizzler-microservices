package handlers

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/Salladin95/card-quizzler-microservices/auth-service/cmd/api/constants"
	"github.com/Salladin95/card-quizzler-microservices/auth-service/cmd/api/entities"
	auth "github.com/Salladin95/card-quizzler-microservices/auth-service/proto"
	"log"
)

// AuthServer is the gRPC server implementation for authentication-related operations.
type AuthServer struct {
	auth.UnimplementedAuthServer // Embed the autogenerated UnimplementedAuthServer to satisfy the interface.
}

// SignIn handles the gRPC request for user sign-in.
func (as *AuthServer) SignIn(ctx context.Context, req *auth.SignInRequest) (*auth.SignInResponse, error) {
	// Extract payload from the gRPC request.
	reqPayload := req.GetPayload()

	// Create a SignInDto from the request payload.
	signInDto := entities.SignInDto{Email: reqPayload.Email, Password: reqPayload.Password}

	// Verify the SignInDto structure.
	err := signInDto.Verify()
	if err != nil {
		return nil, err
	}

	// Log information about the incoming request payload.
	log.Printf("sign in: incoming reqPayload - %v\n\n", reqPayload)

	// Create and return a gRPC response message.
	res := &auth.SignInResponse{Message: fmt.Sprintf("sign-in: get your reqPayload - %v", reqPayload)}
	return res, nil
}

// SignUp handles the gRPC request for user sign-up.
func (as *AuthServer) SignUp(ctx context.Context, req *auth.SignUpRequest) (*auth.SignUpResponse, error) {
	// Extract payload from the gRPC request.
	reqPayload := req.GetPayload()

	// Create a SignUpDto from the request payload.
	signUpDto := entities.SignUpDto{Email: reqPayload.Email, Password: reqPayload.Password, Name: reqPayload.Name, Birthday: reqPayload.Birthday}

	// Verify the SignUpDto structure.
	err := signUpDto.Verify()
	if err != nil {
		return nil, err
	}

	// Create and return a gRPC response message.
	res := &auth.SignUpResponse{Message: fmt.Sprintf("sign-up: get your payload - %v", reqPayload)}
	return res, nil
}

func HandleRabbitPayload(key string, payload []byte) {
	fmt.Print("START PROCESSING MESSAGE")
	switch key {
	case constants.SignInKey:
		fmt.Printf("******* - %v\n\n", payload)
		var signInDto entities.SignInDto
		err := json.Unmarshal(payload, &signInDto)
		if err != nil {
			log.Panic(err)
		}
		fmt.Println("******************* SIGN IN *****************")
		fmt.Printf("MESSAGE FROM QUEUE - %s\n", key)
		fmt.Printf("payload - %v\n\n", signInDto)
	case constants.SignUpKey:
		var signUpDto entities.SignUpDto
		err := json.Unmarshal(payload, &signUpDto)
		if err != nil {
			log.Panic(err)
		}
		fmt.Println("******************* SIGN UP *****************")
		fmt.Printf("MESSAGE FROM QUEUE - %v", key)
	default:
		log.Panic("handlePayload: unknown payload name")
	}
}
