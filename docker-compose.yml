version: '3'
services:
  api-service:
    container_name: api-service-container
    image: api-service-image
    build:
      context: ./api-service
      dockerfile: Dockerfile
    ports:
      - ${API_SERVICE_PORT}:${API_SERVICE_PORT}
    depends_on:
      - rabbitmq
      - redis
    networks:
      - myapp-network
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s

  user-service:
    container_name: user-service-container
    image: user-service-image
    build:
      context: ./user-service
      dockerfile: Dockerfile
    depends_on:
      - rabbitmq
      - redis
      - mongo
    networks:
      - myapp-network
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s

  card-quiz-service:
    container_name: card-quizzler-service-container
    image: card-quizzler-service-image
    build:
      context: ./card-quizzler-service
      dockerfile: Dockerfile
    depends_on:
      - rabbitmq
      - redis
      - postgres
    networks:
      - myapp-network
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s

  logging-service:
    container_name: logging-service-container
    image: logging-service-image
    build:
      context: ./logging-service
      dockerfile: Dockerfile
    depends_on:
      - rabbitmq
      - mongo
    networks:
      - myapp-network

    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s

  mail-service:
    container_name: mail-service-container
    image: mail-service-image
    build:
      context: ./mail-service
      dockerfile: Dockerfile
    depends_on:
      - rabbitmq
    networks:
      - myapp-network
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./volumes/prometheus_data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      #      - ${PROMETHEUS_PORT}:${PROMETHEUS_PORT}
      - "19090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - myapp-network

  rabbitmq:
    image: "rabbitmq:management"
    ports:
      - ${RABBIT_PORT}:${RABBIT_PORT}  # RabbitMQ default port
      - ${RABBIT_MANAGEMENT_PORT}:${RABBIT_MANAGEMENT_PORT} # RabbitMQ Management Plugin
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    deploy:
      mode: replicated
      replicas: 1
    networks:
      - myapp-network
    volumes:
      - ./volumes/rabbitmq/:/var/lib/rabbitmq/

  redis:
    image: "redis:alpine"
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    volumes:
      - ./volumes/broker-redis:/data
    networks:
      - myapp-network

  mongo:
    image: 'mongo:4.2.16-bionic'
    ports:
      - ${MONGO_PORT}:${MONGO_PORT}
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_DB}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - ./volumes/mongo/:/data/db
    networks:
      - myapp-network

  postgres:
    image: "postgres:15.1-alpine"
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    volumes:
      - ./volumes/postgres:/var/lib/postgresql/data
    networks:
      - myapp-network

  db-admin:
    container_name: db-admin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: ${PGADMIN_LISTEN_PORT}
    ports:
      - ${PGADMIN_LISTEN_PORT}:${PGADMIN_LISTEN_PORT}
    networks:
      - myapp-network

networks:
  myapp-network:
