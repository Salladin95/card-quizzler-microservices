// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: module_folder.sql

package card_quizzler_service

import (
	"context"
)

const addModuleToFolder = `-- name: AddModuleToFolder :exec
INSERT INTO module_folder (module_id, folder_id) VALUES ($1, $2)
`

type AddModuleToFolderParams struct {
	ModuleID string
	FolderID string
}

func (q *Queries) AddModuleToFolder(ctx context.Context, arg AddModuleToFolderParams) error {
	_, err := q.db.Exec(ctx, addModuleToFolder, arg.ModuleID, arg.FolderID)
	return err
}

const getFolderWithModulesForUser = `-- name: GetFolderWithModulesForUser :many
SELECT
    f.id AS folder_id,
    f.title AS folder_title,
    m.id, m.title, m.user_id, m.created_at, m.updated_at
FROM folders f
LEFT JOIN module_folder mf ON f.id = mf.folder_id
LEFT JOIN modules m ON mf.module_id = m.id
WHERE f.user_id = $1
`

type GetFolderWithModulesForUserRow struct {
	FolderID    string
	FolderTitle string
	Module      Module
}

func (q *Queries) GetFolderWithModulesForUser(ctx context.Context, userID string) ([]GetFolderWithModulesForUserRow, error) {
	rows, err := q.db.Query(ctx, getFolderWithModulesForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFolderWithModulesForUserRow
	for rows.Next() {
		var i GetFolderWithModulesForUserRow
		if err := rows.Scan(
			&i.FolderID,
			&i.FolderTitle,
			&i.Module.ID,
			&i.Module.Title,
			&i.Module.UserID,
			&i.Module.CreatedAt,
			&i.Module.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
