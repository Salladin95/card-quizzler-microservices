// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: folder.sql

package card_quizzler_service

import (
	"context"
)

const createFolder = `-- name: CreateFolder :exec
INSERT INTO folders (id, title, user_id) VALUES ($1, $2, $3)
`

type CreateFolderParams struct {
	ID     string
	Title  string
	UserID string
}

func (q *Queries) CreateFolder(ctx context.Context, arg CreateFolderParams) error {
	_, err := q.db.Exec(ctx, createFolder, arg.ID, arg.Title, arg.UserID)
	return err
}

const deleteFolder = `-- name: DeleteFolder :exec
DELETE FROM folders WHERE id = $1
`

func (q *Queries) DeleteFolder(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteFolder, id)
	return err
}

const getAllByUserID = `-- name: GetAllByUserID :many
SELECT id, title, user_id, created_at, updated_at FROM folders WHERE user_id = $1
`

func (q *Queries) GetAllByUserID(ctx context.Context, userID string) ([]Folder, error) {
	rows, err := q.db.Query(ctx, getAllByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Folder
	for rows.Next() {
		var i Folder
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFolderByID = `-- name: GetFolderByID :one
SELECT id, title, user_id, created_at, updated_at FROM folders WHERE id = $1
`

func (q *Queries) GetFolderByID(ctx context.Context, id string) (Folder, error) {
	row := q.db.QueryRow(ctx, getFolderByID, id)
	var i Folder
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateFolder = `-- name: UpdateFolder :exec
UPDATE folders SET title = $2 WHERE id = $1
`

type UpdateFolderParams struct {
	ID    string
	Title string
}

func (q *Queries) UpdateFolder(ctx context.Context, arg UpdateFolderParams) error {
	_, err := q.db.Exec(ctx, updateFolder, arg.ID, arg.Title)
	return err
}
