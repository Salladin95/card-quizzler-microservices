// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: term.sql

package card_quizzler_service

import (
	"context"
)

const createTerm = `-- name: CreateTerm :exec
INSERT INTO terms (id, title, description, module_id) VALUES ($1, $2, $3, $4)
`

type CreateTermParams struct {
	ID          string
	Title       string
	Description string
	ModuleID    string
}

func (q *Queries) CreateTerm(ctx context.Context, arg CreateTermParams) error {
	_, err := q.db.Exec(ctx, createTerm,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.ModuleID,
	)
	return err
}

const deleteTerm = `-- name: DeleteTerm :exec
DELETE FROM terms WHERE id = $1
`

func (q *Queries) DeleteTerm(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteTerm, id)
	return err
}

const getTermByID = `-- name: GetTermByID :one
SELECT id, title, description, module_id, created_at, updated_at FROM terms WHERE id = $1
`

func (q *Queries) GetTermByID(ctx context.Context, id string) (Term, error) {
	row := q.db.QueryRow(ctx, getTermByID, id)
	var i Term
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.ModuleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTermsByModuleID = `-- name: GetTermsByModuleID :many
SELECT id, title, description, module_id, created_at, updated_at FROM terms WHERE module_id = $1
`

func (q *Queries) GetTermsByModuleID(ctx context.Context, moduleID string) ([]Term, error) {
	rows, err := q.db.Query(ctx, getTermsByModuleID, moduleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Term
	for rows.Next() {
		var i Term
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.ModuleID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTerm = `-- name: UpdateTerm :exec
UPDATE terms SET title = $2, description = $3 WHERE id = $1
`

type UpdateTermParams struct {
	ID          string
	Title       string
	Description string
}

func (q *Queries) UpdateTerm(ctx context.Context, arg UpdateTermParams) error {
	_, err := q.db.Exec(ctx, updateTerm, arg.ID, arg.Title, arg.Description)
	return err
}
