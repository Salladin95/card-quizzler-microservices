// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.2
// source: card-quizzler-service.proto

package card_quizzler_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RequestWithID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RequestWithID) Reset() {
	*x = RequestWithID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_quizzler_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestWithID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestWithID) ProtoMessage() {}

func (x *RequestWithID) ProtoReflect() protoreflect.Message {
	mi := &file_card_quizzler_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestWithID.ProtoReflect.Descriptor instead.
func (*RequestWithID) Descriptor() ([]byte, []int) {
	return file_card_quizzler_service_proto_rawDescGZIP(), []int{0}
}

func (x *RequestWithID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Code    int64  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_quizzler_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_card_quizzler_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_card_quizzler_service_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Response) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreateFolderPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title  string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	UserID string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *CreateFolderPayload) Reset() {
	*x = CreateFolderPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_quizzler_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFolderPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFolderPayload) ProtoMessage() {}

func (x *CreateFolderPayload) ProtoReflect() protoreflect.Message {
	mi := &file_card_quizzler_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFolderPayload.ProtoReflect.Descriptor instead.
func (*CreateFolderPayload) Descriptor() ([]byte, []int) {
	return file_card_quizzler_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateFolderPayload) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateFolderPayload) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type CreateFolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload *CreateFolderPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CreateFolderRequest) Reset() {
	*x = CreateFolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_quizzler_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFolderRequest) ProtoMessage() {}

func (x *CreateFolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_quizzler_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFolderRequest.ProtoReflect.Descriptor instead.
func (*CreateFolderRequest) Descriptor() ([]byte, []int) {
	return file_card_quizzler_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateFolderRequest) GetPayload() *CreateFolderPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type UpdateFolderPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title    string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	FolderID string `protobuf:"bytes,2,opt,name=folderID,proto3" json:"folderID,omitempty"`
}

func (x *UpdateFolderPayload) Reset() {
	*x = UpdateFolderPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_quizzler_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFolderPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFolderPayload) ProtoMessage() {}

func (x *UpdateFolderPayload) ProtoReflect() protoreflect.Message {
	mi := &file_card_quizzler_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFolderPayload.ProtoReflect.Descriptor instead.
func (*UpdateFolderPayload) Descriptor() ([]byte, []int) {
	return file_card_quizzler_service_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateFolderPayload) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateFolderPayload) GetFolderID() string {
	if x != nil {
		return x.FolderID
	}
	return ""
}

type UpdateFolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload *UpdateFolderPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *UpdateFolderRequest) Reset() {
	*x = UpdateFolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_quizzler_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFolderRequest) ProtoMessage() {}

func (x *UpdateFolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_quizzler_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFolderRequest.ProtoReflect.Descriptor instead.
func (*UpdateFolderRequest) Descriptor() ([]byte, []int) {
	return file_card_quizzler_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateFolderRequest) GetPayload() *UpdateFolderPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type DeleteModuleFromFolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleID string `protobuf:"bytes,1,opt,name=moduleID,proto3" json:"moduleID,omitempty"`
	FolderID string `protobuf:"bytes,2,opt,name=folderID,proto3" json:"folderID,omitempty"`
}

func (x *DeleteModuleFromFolderRequest) Reset() {
	*x = DeleteModuleFromFolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_quizzler_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteModuleFromFolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteModuleFromFolderRequest) ProtoMessage() {}

func (x *DeleteModuleFromFolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_quizzler_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteModuleFromFolderRequest.ProtoReflect.Descriptor instead.
func (*DeleteModuleFromFolderRequest) Descriptor() ([]byte, []int) {
	return file_card_quizzler_service_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteModuleFromFolderRequest) GetModuleID() string {
	if x != nil {
		return x.ModuleID
	}
	return ""
}

func (x *DeleteModuleFromFolderRequest) GetFolderID() string {
	if x != nil {
		return x.FolderID
	}
	return ""
}

type AddFolderToUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	FolderID string `protobuf:"bytes,2,opt,name=folderID,proto3" json:"folderID,omitempty"`
}

func (x *AddFolderToUserRequest) Reset() {
	*x = AddFolderToUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_quizzler_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFolderToUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFolderToUserRequest) ProtoMessage() {}

func (x *AddFolderToUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_quizzler_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFolderToUserRequest.ProtoReflect.Descriptor instead.
func (*AddFolderToUserRequest) Descriptor() ([]byte, []int) {
	return file_card_quizzler_service_proto_rawDescGZIP(), []int{7}
}

func (x *AddFolderToUserRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *AddFolderToUserRequest) GetFolderID() string {
	if x != nil {
		return x.FolderID
	}
	return ""
}

type AddModuleToUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	ModuleID string `protobuf:"bytes,2,opt,name=moduleID,proto3" json:"moduleID,omitempty"`
}

func (x *AddModuleToUserRequest) Reset() {
	*x = AddModuleToUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_quizzler_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddModuleToUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddModuleToUserRequest) ProtoMessage() {}

func (x *AddModuleToUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_quizzler_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddModuleToUserRequest.ProtoReflect.Descriptor instead.
func (*AddModuleToUserRequest) Descriptor() ([]byte, []int) {
	return file_card_quizzler_service_proto_rawDescGZIP(), []int{8}
}

func (x *AddModuleToUserRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *AddModuleToUserRequest) GetModuleID() string {
	if x != nil {
		return x.ModuleID
	}
	return ""
}

type AddModuleToFolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderID string `protobuf:"bytes,1,opt,name=folderID,proto3" json:"folderID,omitempty"`
	ModuleID string `protobuf:"bytes,2,opt,name=moduleID,proto3" json:"moduleID,omitempty"`
}

func (x *AddModuleToFolderRequest) Reset() {
	*x = AddModuleToFolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_quizzler_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddModuleToFolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddModuleToFolderRequest) ProtoMessage() {}

func (x *AddModuleToFolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_quizzler_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddModuleToFolderRequest.ProtoReflect.Descriptor instead.
func (*AddModuleToFolderRequest) Descriptor() ([]byte, []int) {
	return file_card_quizzler_service_proto_rawDescGZIP(), []int{9}
}

func (x *AddModuleToFolderRequest) GetFolderID() string {
	if x != nil {
		return x.FolderID
	}
	return ""
}

func (x *AddModuleToFolderRequest) GetModuleID() string {
	if x != nil {
		return x.ModuleID
	}
	return ""
}

type CreateModulePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title  string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	UserID string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Terms  []byte `protobuf:"bytes,3,opt,name=terms,proto3" json:"terms,omitempty"`
}

func (x *CreateModulePayload) Reset() {
	*x = CreateModulePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_quizzler_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateModulePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateModulePayload) ProtoMessage() {}

func (x *CreateModulePayload) ProtoReflect() protoreflect.Message {
	mi := &file_card_quizzler_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateModulePayload.ProtoReflect.Descriptor instead.
func (*CreateModulePayload) Descriptor() ([]byte, []int) {
	return file_card_quizzler_service_proto_rawDescGZIP(), []int{10}
}

func (x *CreateModulePayload) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateModulePayload) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CreateModulePayload) GetTerms() []byte {
	if x != nil {
		return x.Terms
	}
	return nil
}

type CreateModuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload *CreateModulePayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CreateModuleRequest) Reset() {
	*x = CreateModuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_quizzler_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateModuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateModuleRequest) ProtoMessage() {}

func (x *CreateModuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_quizzler_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateModuleRequest.ProtoReflect.Descriptor instead.
func (*CreateModuleRequest) Descriptor() ([]byte, []int) {
	return file_card_quizzler_service_proto_rawDescGZIP(), []int{11}
}

func (x *CreateModuleRequest) GetPayload() *CreateModulePayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CreateModuleInFolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload  *CreateModulePayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	FolderID string               `protobuf:"bytes,2,opt,name=folderID,proto3" json:"folderID,omitempty"`
}

func (x *CreateModuleInFolderRequest) Reset() {
	*x = CreateModuleInFolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_quizzler_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateModuleInFolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateModuleInFolderRequest) ProtoMessage() {}

func (x *CreateModuleInFolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_quizzler_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateModuleInFolderRequest.ProtoReflect.Descriptor instead.
func (*CreateModuleInFolderRequest) Descriptor() ([]byte, []int) {
	return file_card_quizzler_service_proto_rawDescGZIP(), []int{12}
}

func (x *CreateModuleInFolderRequest) GetPayload() *CreateModulePayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *CreateModuleInFolderRequest) GetFolderID() string {
	if x != nil {
		return x.FolderID
	}
	return ""
}

type UpdateModulePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title        string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	NewTerms     []byte `protobuf:"bytes,2,opt,name=newTerms,proto3" json:"newTerms,omitempty"`
	UpdatedTerms []byte `protobuf:"bytes,3,opt,name=updatedTerms,proto3" json:"updatedTerms,omitempty"`
	Id           string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UpdateModulePayload) Reset() {
	*x = UpdateModulePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_quizzler_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateModulePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateModulePayload) ProtoMessage() {}

func (x *UpdateModulePayload) ProtoReflect() protoreflect.Message {
	mi := &file_card_quizzler_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateModulePayload.ProtoReflect.Descriptor instead.
func (*UpdateModulePayload) Descriptor() ([]byte, []int) {
	return file_card_quizzler_service_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateModulePayload) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateModulePayload) GetNewTerms() []byte {
	if x != nil {
		return x.NewTerms
	}
	return nil
}

func (x *UpdateModulePayload) GetUpdatedTerms() []byte {
	if x != nil {
		return x.UpdatedTerms
	}
	return nil
}

func (x *UpdateModulePayload) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdateModuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload *UpdateModulePayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *UpdateModuleRequest) Reset() {
	*x = UpdateModuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_quizzler_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateModuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateModuleRequest) ProtoMessage() {}

func (x *UpdateModuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_quizzler_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateModuleRequest.ProtoReflect.Descriptor instead.
func (*UpdateModuleRequest) Descriptor() ([]byte, []int) {
	return file_card_quizzler_service_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateModuleRequest) GetPayload() *UpdateModulePayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type ProcessQuizRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Terms    []byte `protobuf:"bytes,1,opt,name=terms,proto3" json:"terms,omitempty"`
	ModuleID string `protobuf:"bytes,2,opt,name=moduleID,proto3" json:"moduleID,omitempty"`
}

func (x *ProcessQuizRequest) Reset() {
	*x = ProcessQuizRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_quizzler_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessQuizRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessQuizRequest) ProtoMessage() {}

func (x *ProcessQuizRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_quizzler_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessQuizRequest.ProtoReflect.Descriptor instead.
func (*ProcessQuizRequest) Descriptor() ([]byte, []int) {
	return file_card_quizzler_service_proto_rawDescGZIP(), []int{15}
}

func (x *ProcessQuizRequest) GetTerms() []byte {
	if x != nil {
		return x.Terms
	}
	return nil
}

func (x *ProcessQuizRequest) GetModuleID() string {
	if x != nil {
		return x.ModuleID
	}
	return ""
}

type SortOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int64  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page   int64  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	SortBy string `protobuf:"bytes,3,opt,name=sortBy,proto3" json:"sortBy,omitempty"`
}

func (x *SortOptions) Reset() {
	*x = SortOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_quizzler_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortOptions) ProtoMessage() {}

func (x *SortOptions) ProtoReflect() protoreflect.Message {
	mi := &file_card_quizzler_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortOptions.ProtoReflect.Descriptor instead.
func (*SortOptions) Descriptor() ([]byte, []int) {
	return file_card_quizzler_service_proto_rawDescGZIP(), []int{16}
}

func (x *SortOptions) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SortOptions) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SortOptions) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

type GetUserFoldersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Payload *SortOptions `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GetUserFoldersRequest) Reset() {
	*x = GetUserFoldersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_quizzler_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserFoldersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserFoldersRequest) ProtoMessage() {}

func (x *GetUserFoldersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_quizzler_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserFoldersRequest.ProtoReflect.Descriptor instead.
func (*GetUserFoldersRequest) Descriptor() ([]byte, []int) {
	return file_card_quizzler_service_proto_rawDescGZIP(), []int{17}
}

func (x *GetUserFoldersRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetUserFoldersRequest) GetPayload() *SortOptions {
	if x != nil {
		return x.Payload
	}
	return nil
}

type GetUserModulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Payload *SortOptions `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GetUserModulesRequest) Reset() {
	*x = GetUserModulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_quizzler_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserModulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserModulesRequest) ProtoMessage() {}

func (x *GetUserModulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_quizzler_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserModulesRequest.ProtoReflect.Descriptor instead.
func (*GetUserModulesRequest) Descriptor() ([]byte, []int) {
	return file_card_quizzler_service_proto_rawDescGZIP(), []int{18}
}

func (x *GetUserModulesRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetUserModulesRequest) GetPayload() *SortOptions {
	if x != nil {
		return x.Payload
	}
	return nil
}

type GetDifficultModulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetDifficultModulesRequest) Reset() {
	*x = GetDifficultModulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_quizzler_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDifficultModulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDifficultModulesRequest) ProtoMessage() {}

func (x *GetDifficultModulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_quizzler_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDifficultModulesRequest.ProtoReflect.Descriptor instead.
func (*GetDifficultModulesRequest) Descriptor() ([]byte, []int) {
	return file_card_quizzler_service_proto_rawDescGZIP(), []int{19}
}

func (x *GetDifficultModulesRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdaterTermRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ModuleID    string `protobuf:"bytes,4,opt,name=moduleID,proto3" json:"moduleID,omitempty"`
}

func (x *UpdaterTermRequest) Reset() {
	*x = UpdaterTermRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_card_quizzler_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdaterTermRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdaterTermRequest) ProtoMessage() {}

func (x *UpdaterTermRequest) ProtoReflect() protoreflect.Message {
	mi := &file_card_quizzler_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdaterTermRequest.ProtoReflect.Descriptor instead.
func (*UpdaterTermRequest) Descriptor() ([]byte, []int) {
	return file_card_quizzler_service_proto_rawDescGZIP(), []int{20}
}

func (x *UpdaterTermRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdaterTermRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdaterTermRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdaterTermRequest) GetModuleID() string {
	if x != nil {
		return x.ModuleID
	}
	return ""
}

var File_card_quizzler_service_proto protoreflect.FileDescriptor

var file_card_quizzler_service_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x22, 0x1f, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x43, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x5b, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x44, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x47, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0x5b,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75,
	0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x57, 0x0a, 0x1d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x22, 0x4c, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x22, 0x4c, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44,
	0x22, 0x52, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x44, 0x22, 0x59, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x72,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x22,
	0x5b, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71,
	0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x7f, 0x0a, 0x1b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0x7b, 0x0a,
	0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65,
	0x77, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6e, 0x65,
	0x77, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5b, 0x0a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x44, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x46, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x65,
	0x72, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x22,
	0x4f, 0x0a, 0x0b, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x72, 0x74,
	0x42, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79,
	0x22, 0x65, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x65, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x2c,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x78, 0x0a, 0x12,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x32, 0xdf, 0x0d, 0x0a, 0x13, 0x43, 0x61, 0x72, 0x64, 0x51,
	0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5f,
	0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x29, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a,
	0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x2c, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x56, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49,
	0x44, 0x12, 0x24, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x1a, 0x1f, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71,
	0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a,
	0x7a, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69,
	0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x55, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x12, 0x24, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x1a, 0x1f, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x16, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a,
	0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0f, 0x41, 0x64,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2d, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x2c, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x55, 0x49, 0x44, 0x12, 0x31, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x44, 0x12,
	0x24, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x44, 0x1a, 0x1f, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69,
	0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2a, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75,
	0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x6e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5b, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x2a, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x24, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x44, 0x1a, 0x1f, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a,
	0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71,
	0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x41, 0x64, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75,
	0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58,
	0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x29, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71,
	0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x56, 0x5a, 0x54, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x61, 0x6c, 0x6c, 0x61, 0x64, 0x69, 0x6e, 0x39,
	0x35, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x2d,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x71, 0x75, 0x69, 0x7a, 0x7a, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_card_quizzler_service_proto_rawDescOnce sync.Once
	file_card_quizzler_service_proto_rawDescData = file_card_quizzler_service_proto_rawDesc
)

func file_card_quizzler_service_proto_rawDescGZIP() []byte {
	file_card_quizzler_service_proto_rawDescOnce.Do(func() {
		file_card_quizzler_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_card_quizzler_service_proto_rawDescData)
	})
	return file_card_quizzler_service_proto_rawDescData
}

var file_card_quizzler_service_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_card_quizzler_service_proto_goTypes = []interface{}{
	(*RequestWithID)(nil),                 // 0: card_quizzler_service.RequestWithID
	(*Response)(nil),                      // 1: card_quizzler_service.Response
	(*CreateFolderPayload)(nil),           // 2: card_quizzler_service.CreateFolderPayload
	(*CreateFolderRequest)(nil),           // 3: card_quizzler_service.CreateFolderRequest
	(*UpdateFolderPayload)(nil),           // 4: card_quizzler_service.UpdateFolderPayload
	(*UpdateFolderRequest)(nil),           // 5: card_quizzler_service.UpdateFolderRequest
	(*DeleteModuleFromFolderRequest)(nil), // 6: card_quizzler_service.DeleteModuleFromFolderRequest
	(*AddFolderToUserRequest)(nil),        // 7: card_quizzler_service.AddFolderToUserRequest
	(*AddModuleToUserRequest)(nil),        // 8: card_quizzler_service.AddModuleToUserRequest
	(*AddModuleToFolderRequest)(nil),      // 9: card_quizzler_service.AddModuleToFolderRequest
	(*CreateModulePayload)(nil),           // 10: card_quizzler_service.CreateModulePayload
	(*CreateModuleRequest)(nil),           // 11: card_quizzler_service.CreateModuleRequest
	(*CreateModuleInFolderRequest)(nil),   // 12: card_quizzler_service.CreateModuleInFolderRequest
	(*UpdateModulePayload)(nil),           // 13: card_quizzler_service.UpdateModulePayload
	(*UpdateModuleRequest)(nil),           // 14: card_quizzler_service.UpdateModuleRequest
	(*ProcessQuizRequest)(nil),            // 15: card_quizzler_service.ProcessQuizRequest
	(*SortOptions)(nil),                   // 16: card_quizzler_service.SortOptions
	(*GetUserFoldersRequest)(nil),         // 17: card_quizzler_service.GetUserFoldersRequest
	(*GetUserModulesRequest)(nil),         // 18: card_quizzler_service.GetUserModulesRequest
	(*GetDifficultModulesRequest)(nil),    // 19: card_quizzler_service.GetDifficultModulesRequest
	(*UpdaterTermRequest)(nil),            // 20: card_quizzler_service.UpdaterTermRequest
}
var file_card_quizzler_service_proto_depIdxs = []int32{
	2,  // 0: card_quizzler_service.CreateFolderRequest.payload:type_name -> card_quizzler_service.CreateFolderPayload
	4,  // 1: card_quizzler_service.UpdateFolderRequest.payload:type_name -> card_quizzler_service.UpdateFolderPayload
	10, // 2: card_quizzler_service.CreateModuleRequest.payload:type_name -> card_quizzler_service.CreateModulePayload
	10, // 3: card_quizzler_service.CreateModuleInFolderRequest.payload:type_name -> card_quizzler_service.CreateModulePayload
	13, // 4: card_quizzler_service.UpdateModuleRequest.payload:type_name -> card_quizzler_service.UpdateModulePayload
	16, // 5: card_quizzler_service.GetUserFoldersRequest.payload:type_name -> card_quizzler_service.SortOptions
	16, // 6: card_quizzler_service.GetUserModulesRequest.payload:type_name -> card_quizzler_service.SortOptions
	15, // 7: card_quizzler_service.CardQuizzlerService.ProcessQuizResult:input_type -> card_quizzler_service.ProcessQuizRequest
	17, // 8: card_quizzler_service.CardQuizzlerService.GetUserFolders:input_type -> card_quizzler_service.GetUserFoldersRequest
	0,  // 9: card_quizzler_service.CardQuizzlerService.GetFolderByID:input_type -> card_quizzler_service.RequestWithID
	3,  // 10: card_quizzler_service.CardQuizzlerService.CreateFolder:input_type -> card_quizzler_service.CreateFolderRequest
	5,  // 11: card_quizzler_service.CardQuizzlerService.UpdateFolder:input_type -> card_quizzler_service.UpdateFolderRequest
	0,  // 12: card_quizzler_service.CardQuizzlerService.DeleteFolder:input_type -> card_quizzler_service.RequestWithID
	6,  // 13: card_quizzler_service.CardQuizzlerService.DeleteModuleFromFolder:input_type -> card_quizzler_service.DeleteModuleFromFolderRequest
	7,  // 14: card_quizzler_service.CardQuizzlerService.AddFolderToUser:input_type -> card_quizzler_service.AddFolderToUserRequest
	18, // 15: card_quizzler_service.CardQuizzlerService.GetUserModules:input_type -> card_quizzler_service.GetUserModulesRequest
	19, // 16: card_quizzler_service.CardQuizzlerService.GetDifficultModulesByUID:input_type -> card_quizzler_service.GetDifficultModulesRequest
	0,  // 17: card_quizzler_service.CardQuizzlerService.GetModuleByID:input_type -> card_quizzler_service.RequestWithID
	11, // 18: card_quizzler_service.CardQuizzlerService.CreateModule:input_type -> card_quizzler_service.CreateModuleRequest
	12, // 19: card_quizzler_service.CardQuizzlerService.CreateModuleInFolder:input_type -> card_quizzler_service.CreateModuleInFolderRequest
	14, // 20: card_quizzler_service.CardQuizzlerService.UpdateModule:input_type -> card_quizzler_service.UpdateModuleRequest
	0,  // 21: card_quizzler_service.CardQuizzlerService.DeleteModule:input_type -> card_quizzler_service.RequestWithID
	8,  // 22: card_quizzler_service.CardQuizzlerService.AddModuleToUser:input_type -> card_quizzler_service.AddModuleToUserRequest
	9,  // 23: card_quizzler_service.CardQuizzlerService.AddModuleToFolder:input_type -> card_quizzler_service.AddModuleToFolderRequest
	20, // 24: card_quizzler_service.CardQuizzlerService.UpdateTerm:input_type -> card_quizzler_service.UpdaterTermRequest
	1,  // 25: card_quizzler_service.CardQuizzlerService.ProcessQuizResult:output_type -> card_quizzler_service.Response
	1,  // 26: card_quizzler_service.CardQuizzlerService.GetUserFolders:output_type -> card_quizzler_service.Response
	1,  // 27: card_quizzler_service.CardQuizzlerService.GetFolderByID:output_type -> card_quizzler_service.Response
	1,  // 28: card_quizzler_service.CardQuizzlerService.CreateFolder:output_type -> card_quizzler_service.Response
	1,  // 29: card_quizzler_service.CardQuizzlerService.UpdateFolder:output_type -> card_quizzler_service.Response
	1,  // 30: card_quizzler_service.CardQuizzlerService.DeleteFolder:output_type -> card_quizzler_service.Response
	1,  // 31: card_quizzler_service.CardQuizzlerService.DeleteModuleFromFolder:output_type -> card_quizzler_service.Response
	1,  // 32: card_quizzler_service.CardQuizzlerService.AddFolderToUser:output_type -> card_quizzler_service.Response
	1,  // 33: card_quizzler_service.CardQuizzlerService.GetUserModules:output_type -> card_quizzler_service.Response
	1,  // 34: card_quizzler_service.CardQuizzlerService.GetDifficultModulesByUID:output_type -> card_quizzler_service.Response
	1,  // 35: card_quizzler_service.CardQuizzlerService.GetModuleByID:output_type -> card_quizzler_service.Response
	1,  // 36: card_quizzler_service.CardQuizzlerService.CreateModule:output_type -> card_quizzler_service.Response
	1,  // 37: card_quizzler_service.CardQuizzlerService.CreateModuleInFolder:output_type -> card_quizzler_service.Response
	1,  // 38: card_quizzler_service.CardQuizzlerService.UpdateModule:output_type -> card_quizzler_service.Response
	1,  // 39: card_quizzler_service.CardQuizzlerService.DeleteModule:output_type -> card_quizzler_service.Response
	1,  // 40: card_quizzler_service.CardQuizzlerService.AddModuleToUser:output_type -> card_quizzler_service.Response
	1,  // 41: card_quizzler_service.CardQuizzlerService.AddModuleToFolder:output_type -> card_quizzler_service.Response
	1,  // 42: card_quizzler_service.CardQuizzlerService.UpdateTerm:output_type -> card_quizzler_service.Response
	25, // [25:43] is the sub-list for method output_type
	7,  // [7:25] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_card_quizzler_service_proto_init() }
func file_card_quizzler_service_proto_init() {
	if File_card_quizzler_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_card_quizzler_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestWithID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_quizzler_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_quizzler_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFolderPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_quizzler_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_quizzler_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFolderPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_quizzler_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_quizzler_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteModuleFromFolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_quizzler_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFolderToUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_quizzler_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddModuleToUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_quizzler_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddModuleToFolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_quizzler_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateModulePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_quizzler_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateModuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_quizzler_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateModuleInFolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_quizzler_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateModulePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_quizzler_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateModuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_quizzler_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessQuizRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_quizzler_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_quizzler_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserFoldersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_quizzler_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserModulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_quizzler_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDifficultModulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_card_quizzler_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdaterTermRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_card_quizzler_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_card_quizzler_service_proto_goTypes,
		DependencyIndexes: file_card_quizzler_service_proto_depIdxs,
		MessageInfos:      file_card_quizzler_service_proto_msgTypes,
	}.Build()
	File_card_quizzler_service_proto = out.File
	file_card_quizzler_service_proto_rawDesc = nil
	file_card_quizzler_service_proto_goTypes = nil
	file_card_quizzler_service_proto_depIdxs = nil
}
