// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: card-quizzler-service.proto

package card_quizzler_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CardQuizzlerServiceClient is the client API for CardQuizzlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardQuizzlerServiceClient interface {
	ProcessQuizResult(ctx context.Context, in *ProcessQuizRequest, opts ...grpc.CallOption) (*Response, error)
	GetOpenFolders(ctx context.Context, in *GetOpenFoldersRequest, opts ...grpc.CallOption) (*Response, error)
	GetOpenModules(ctx context.Context, in *GetOpenModulesRequest, opts ...grpc.CallOption) (*Response, error)
	GetUserFolders(ctx context.Context, in *GetUserFoldersRequest, opts ...grpc.CallOption) (*Response, error)
	GetFolderByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*Response, error)
	GetFoldersByTitle(ctx context.Context, in *GetByTitleRequest, opts ...grpc.CallOption) (*Response, error)
	CreateFolder(ctx context.Context, in *CreateFolderRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateFolder(ctx context.Context, in *UpdateFolderRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteFolder(ctx context.Context, in *RequestWithIdAndUID, opts ...grpc.CallOption) (*Response, error)
	DeleteModuleFromFolder(ctx context.Context, in *DeleteModuleFromFolderRequest, opts ...grpc.CallOption) (*Response, error)
	AddFolderToUser(ctx context.Context, in *AddFolderToUserRequest, opts ...grpc.CallOption) (*Response, error)
	GetUserModules(ctx context.Context, in *GetUserModulesRequest, opts ...grpc.CallOption) (*Response, error)
	GetDifficultModulesByUID(ctx context.Context, in *GetDifficultModulesRequest, opts ...grpc.CallOption) (*Response, error)
	GetModuleByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*Response, error)
	GetModulesByTitle(ctx context.Context, in *GetByTitleRequest, opts ...grpc.CallOption) (*Response, error)
	CreateModule(ctx context.Context, in *CreateModuleRequest, opts ...grpc.CallOption) (*Response, error)
	CreateModuleInFolder(ctx context.Context, in *CreateModuleInFolderRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateModule(ctx context.Context, in *UpdateModuleRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteModule(ctx context.Context, in *RequestWithIdAndUID, opts ...grpc.CallOption) (*Response, error)
	AddModuleToUser(ctx context.Context, in *AddModuleToUserRequest, opts ...grpc.CallOption) (*Response, error)
	AddModuleToFolder(ctx context.Context, in *AddModuleToFolderRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateTerm(ctx context.Context, in *UpdaterTermRequest, opts ...grpc.CallOption) (*Response, error)
}

type cardQuizzlerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCardQuizzlerServiceClient(cc grpc.ClientConnInterface) CardQuizzlerServiceClient {
	return &cardQuizzlerServiceClient{cc}
}

func (c *cardQuizzlerServiceClient) ProcessQuizResult(ctx context.Context, in *ProcessQuizRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/card_quizzler_service.CardQuizzlerService/ProcessQuizResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardQuizzlerServiceClient) GetOpenFolders(ctx context.Context, in *GetOpenFoldersRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/card_quizzler_service.CardQuizzlerService/GetOpenFolders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardQuizzlerServiceClient) GetOpenModules(ctx context.Context, in *GetOpenModulesRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/card_quizzler_service.CardQuizzlerService/GetOpenModules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardQuizzlerServiceClient) GetUserFolders(ctx context.Context, in *GetUserFoldersRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/card_quizzler_service.CardQuizzlerService/GetUserFolders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardQuizzlerServiceClient) GetFolderByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/card_quizzler_service.CardQuizzlerService/GetFolderByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardQuizzlerServiceClient) GetFoldersByTitle(ctx context.Context, in *GetByTitleRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/card_quizzler_service.CardQuizzlerService/GetFoldersByTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardQuizzlerServiceClient) CreateFolder(ctx context.Context, in *CreateFolderRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/card_quizzler_service.CardQuizzlerService/CreateFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardQuizzlerServiceClient) UpdateFolder(ctx context.Context, in *UpdateFolderRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/card_quizzler_service.CardQuizzlerService/UpdateFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardQuizzlerServiceClient) DeleteFolder(ctx context.Context, in *RequestWithIdAndUID, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/card_quizzler_service.CardQuizzlerService/DeleteFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardQuizzlerServiceClient) DeleteModuleFromFolder(ctx context.Context, in *DeleteModuleFromFolderRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/card_quizzler_service.CardQuizzlerService/DeleteModuleFromFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardQuizzlerServiceClient) AddFolderToUser(ctx context.Context, in *AddFolderToUserRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/card_quizzler_service.CardQuizzlerService/AddFolderToUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardQuizzlerServiceClient) GetUserModules(ctx context.Context, in *GetUserModulesRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/card_quizzler_service.CardQuizzlerService/GetUserModules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardQuizzlerServiceClient) GetDifficultModulesByUID(ctx context.Context, in *GetDifficultModulesRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/card_quizzler_service.CardQuizzlerService/GetDifficultModulesByUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardQuizzlerServiceClient) GetModuleByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/card_quizzler_service.CardQuizzlerService/GetModuleByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardQuizzlerServiceClient) GetModulesByTitle(ctx context.Context, in *GetByTitleRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/card_quizzler_service.CardQuizzlerService/GetModulesByTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardQuizzlerServiceClient) CreateModule(ctx context.Context, in *CreateModuleRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/card_quizzler_service.CardQuizzlerService/CreateModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardQuizzlerServiceClient) CreateModuleInFolder(ctx context.Context, in *CreateModuleInFolderRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/card_quizzler_service.CardQuizzlerService/CreateModuleInFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardQuizzlerServiceClient) UpdateModule(ctx context.Context, in *UpdateModuleRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/card_quizzler_service.CardQuizzlerService/UpdateModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardQuizzlerServiceClient) DeleteModule(ctx context.Context, in *RequestWithIdAndUID, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/card_quizzler_service.CardQuizzlerService/DeleteModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardQuizzlerServiceClient) AddModuleToUser(ctx context.Context, in *AddModuleToUserRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/card_quizzler_service.CardQuizzlerService/AddModuleToUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardQuizzlerServiceClient) AddModuleToFolder(ctx context.Context, in *AddModuleToFolderRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/card_quizzler_service.CardQuizzlerService/AddModuleToFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardQuizzlerServiceClient) UpdateTerm(ctx context.Context, in *UpdaterTermRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/card_quizzler_service.CardQuizzlerService/UpdateTerm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardQuizzlerServiceServer is the server API for CardQuizzlerService service.
// All implementations must embed UnimplementedCardQuizzlerServiceServer
// for forward compatibility
type CardQuizzlerServiceServer interface {
	ProcessQuizResult(context.Context, *ProcessQuizRequest) (*Response, error)
	GetOpenFolders(context.Context, *GetOpenFoldersRequest) (*Response, error)
	GetOpenModules(context.Context, *GetOpenModulesRequest) (*Response, error)
	GetUserFolders(context.Context, *GetUserFoldersRequest) (*Response, error)
	GetFolderByID(context.Context, *GetByIDRequest) (*Response, error)
	GetFoldersByTitle(context.Context, *GetByTitleRequest) (*Response, error)
	CreateFolder(context.Context, *CreateFolderRequest) (*Response, error)
	UpdateFolder(context.Context, *UpdateFolderRequest) (*Response, error)
	DeleteFolder(context.Context, *RequestWithIdAndUID) (*Response, error)
	DeleteModuleFromFolder(context.Context, *DeleteModuleFromFolderRequest) (*Response, error)
	AddFolderToUser(context.Context, *AddFolderToUserRequest) (*Response, error)
	GetUserModules(context.Context, *GetUserModulesRequest) (*Response, error)
	GetDifficultModulesByUID(context.Context, *GetDifficultModulesRequest) (*Response, error)
	GetModuleByID(context.Context, *GetByIDRequest) (*Response, error)
	GetModulesByTitle(context.Context, *GetByTitleRequest) (*Response, error)
	CreateModule(context.Context, *CreateModuleRequest) (*Response, error)
	CreateModuleInFolder(context.Context, *CreateModuleInFolderRequest) (*Response, error)
	UpdateModule(context.Context, *UpdateModuleRequest) (*Response, error)
	DeleteModule(context.Context, *RequestWithIdAndUID) (*Response, error)
	AddModuleToUser(context.Context, *AddModuleToUserRequest) (*Response, error)
	AddModuleToFolder(context.Context, *AddModuleToFolderRequest) (*Response, error)
	UpdateTerm(context.Context, *UpdaterTermRequest) (*Response, error)
	mustEmbedUnimplementedCardQuizzlerServiceServer()
}

// UnimplementedCardQuizzlerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCardQuizzlerServiceServer struct {
}

func (UnimplementedCardQuizzlerServiceServer) ProcessQuizResult(context.Context, *ProcessQuizRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessQuizResult not implemented")
}
func (UnimplementedCardQuizzlerServiceServer) GetOpenFolders(context.Context, *GetOpenFoldersRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenFolders not implemented")
}
func (UnimplementedCardQuizzlerServiceServer) GetOpenModules(context.Context, *GetOpenModulesRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenModules not implemented")
}
func (UnimplementedCardQuizzlerServiceServer) GetUserFolders(context.Context, *GetUserFoldersRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFolders not implemented")
}
func (UnimplementedCardQuizzlerServiceServer) GetFolderByID(context.Context, *GetByIDRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFolderByID not implemented")
}
func (UnimplementedCardQuizzlerServiceServer) GetFoldersByTitle(context.Context, *GetByTitleRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFoldersByTitle not implemented")
}
func (UnimplementedCardQuizzlerServiceServer) CreateFolder(context.Context, *CreateFolderRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFolder not implemented")
}
func (UnimplementedCardQuizzlerServiceServer) UpdateFolder(context.Context, *UpdateFolderRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFolder not implemented")
}
func (UnimplementedCardQuizzlerServiceServer) DeleteFolder(context.Context, *RequestWithIdAndUID) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFolder not implemented")
}
func (UnimplementedCardQuizzlerServiceServer) DeleteModuleFromFolder(context.Context, *DeleteModuleFromFolderRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModuleFromFolder not implemented")
}
func (UnimplementedCardQuizzlerServiceServer) AddFolderToUser(context.Context, *AddFolderToUserRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFolderToUser not implemented")
}
func (UnimplementedCardQuizzlerServiceServer) GetUserModules(context.Context, *GetUserModulesRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserModules not implemented")
}
func (UnimplementedCardQuizzlerServiceServer) GetDifficultModulesByUID(context.Context, *GetDifficultModulesRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDifficultModulesByUID not implemented")
}
func (UnimplementedCardQuizzlerServiceServer) GetModuleByID(context.Context, *GetByIDRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModuleByID not implemented")
}
func (UnimplementedCardQuizzlerServiceServer) GetModulesByTitle(context.Context, *GetByTitleRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModulesByTitle not implemented")
}
func (UnimplementedCardQuizzlerServiceServer) CreateModule(context.Context, *CreateModuleRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModule not implemented")
}
func (UnimplementedCardQuizzlerServiceServer) CreateModuleInFolder(context.Context, *CreateModuleInFolderRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModuleInFolder not implemented")
}
func (UnimplementedCardQuizzlerServiceServer) UpdateModule(context.Context, *UpdateModuleRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModule not implemented")
}
func (UnimplementedCardQuizzlerServiceServer) DeleteModule(context.Context, *RequestWithIdAndUID) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModule not implemented")
}
func (UnimplementedCardQuizzlerServiceServer) AddModuleToUser(context.Context, *AddModuleToUserRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddModuleToUser not implemented")
}
func (UnimplementedCardQuizzlerServiceServer) AddModuleToFolder(context.Context, *AddModuleToFolderRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddModuleToFolder not implemented")
}
func (UnimplementedCardQuizzlerServiceServer) UpdateTerm(context.Context, *UpdaterTermRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTerm not implemented")
}
func (UnimplementedCardQuizzlerServiceServer) mustEmbedUnimplementedCardQuizzlerServiceServer() {}

// UnsafeCardQuizzlerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardQuizzlerServiceServer will
// result in compilation errors.
type UnsafeCardQuizzlerServiceServer interface {
	mustEmbedUnimplementedCardQuizzlerServiceServer()
}

func RegisterCardQuizzlerServiceServer(s grpc.ServiceRegistrar, srv CardQuizzlerServiceServer) {
	s.RegisterService(&CardQuizzlerService_ServiceDesc, srv)
}

func _CardQuizzlerService_ProcessQuizResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardQuizzlerServiceServer).ProcessQuizResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_quizzler_service.CardQuizzlerService/ProcessQuizResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardQuizzlerServiceServer).ProcessQuizResult(ctx, req.(*ProcessQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardQuizzlerService_GetOpenFolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpenFoldersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardQuizzlerServiceServer).GetOpenFolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_quizzler_service.CardQuizzlerService/GetOpenFolders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardQuizzlerServiceServer).GetOpenFolders(ctx, req.(*GetOpenFoldersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardQuizzlerService_GetOpenModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpenModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardQuizzlerServiceServer).GetOpenModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_quizzler_service.CardQuizzlerService/GetOpenModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardQuizzlerServiceServer).GetOpenModules(ctx, req.(*GetOpenModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardQuizzlerService_GetUserFolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFoldersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardQuizzlerServiceServer).GetUserFolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_quizzler_service.CardQuizzlerService/GetUserFolders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardQuizzlerServiceServer).GetUserFolders(ctx, req.(*GetUserFoldersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardQuizzlerService_GetFolderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardQuizzlerServiceServer).GetFolderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_quizzler_service.CardQuizzlerService/GetFolderByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardQuizzlerServiceServer).GetFolderByID(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardQuizzlerService_GetFoldersByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardQuizzlerServiceServer).GetFoldersByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_quizzler_service.CardQuizzlerService/GetFoldersByTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardQuizzlerServiceServer).GetFoldersByTitle(ctx, req.(*GetByTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardQuizzlerService_CreateFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardQuizzlerServiceServer).CreateFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_quizzler_service.CardQuizzlerService/CreateFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardQuizzlerServiceServer).CreateFolder(ctx, req.(*CreateFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardQuizzlerService_UpdateFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardQuizzlerServiceServer).UpdateFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_quizzler_service.CardQuizzlerService/UpdateFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardQuizzlerServiceServer).UpdateFolder(ctx, req.(*UpdateFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardQuizzlerService_DeleteFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWithIdAndUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardQuizzlerServiceServer).DeleteFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_quizzler_service.CardQuizzlerService/DeleteFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardQuizzlerServiceServer).DeleteFolder(ctx, req.(*RequestWithIdAndUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardQuizzlerService_DeleteModuleFromFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModuleFromFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardQuizzlerServiceServer).DeleteModuleFromFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_quizzler_service.CardQuizzlerService/DeleteModuleFromFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardQuizzlerServiceServer).DeleteModuleFromFolder(ctx, req.(*DeleteModuleFromFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardQuizzlerService_AddFolderToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFolderToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardQuizzlerServiceServer).AddFolderToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_quizzler_service.CardQuizzlerService/AddFolderToUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardQuizzlerServiceServer).AddFolderToUser(ctx, req.(*AddFolderToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardQuizzlerService_GetUserModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardQuizzlerServiceServer).GetUserModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_quizzler_service.CardQuizzlerService/GetUserModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardQuizzlerServiceServer).GetUserModules(ctx, req.(*GetUserModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardQuizzlerService_GetDifficultModulesByUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDifficultModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardQuizzlerServiceServer).GetDifficultModulesByUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_quizzler_service.CardQuizzlerService/GetDifficultModulesByUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardQuizzlerServiceServer).GetDifficultModulesByUID(ctx, req.(*GetDifficultModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardQuizzlerService_GetModuleByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardQuizzlerServiceServer).GetModuleByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_quizzler_service.CardQuizzlerService/GetModuleByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardQuizzlerServiceServer).GetModuleByID(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardQuizzlerService_GetModulesByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardQuizzlerServiceServer).GetModulesByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_quizzler_service.CardQuizzlerService/GetModulesByTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardQuizzlerServiceServer).GetModulesByTitle(ctx, req.(*GetByTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardQuizzlerService_CreateModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardQuizzlerServiceServer).CreateModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_quizzler_service.CardQuizzlerService/CreateModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardQuizzlerServiceServer).CreateModule(ctx, req.(*CreateModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardQuizzlerService_CreateModuleInFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModuleInFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardQuizzlerServiceServer).CreateModuleInFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_quizzler_service.CardQuizzlerService/CreateModuleInFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardQuizzlerServiceServer).CreateModuleInFolder(ctx, req.(*CreateModuleInFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardQuizzlerService_UpdateModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardQuizzlerServiceServer).UpdateModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_quizzler_service.CardQuizzlerService/UpdateModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardQuizzlerServiceServer).UpdateModule(ctx, req.(*UpdateModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardQuizzlerService_DeleteModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWithIdAndUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardQuizzlerServiceServer).DeleteModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_quizzler_service.CardQuizzlerService/DeleteModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardQuizzlerServiceServer).DeleteModule(ctx, req.(*RequestWithIdAndUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardQuizzlerService_AddModuleToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddModuleToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardQuizzlerServiceServer).AddModuleToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_quizzler_service.CardQuizzlerService/AddModuleToUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardQuizzlerServiceServer).AddModuleToUser(ctx, req.(*AddModuleToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardQuizzlerService_AddModuleToFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddModuleToFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardQuizzlerServiceServer).AddModuleToFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_quizzler_service.CardQuizzlerService/AddModuleToFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardQuizzlerServiceServer).AddModuleToFolder(ctx, req.(*AddModuleToFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardQuizzlerService_UpdateTerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdaterTermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardQuizzlerServiceServer).UpdateTerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card_quizzler_service.CardQuizzlerService/UpdateTerm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardQuizzlerServiceServer).UpdateTerm(ctx, req.(*UpdaterTermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CardQuizzlerService_ServiceDesc is the grpc.ServiceDesc for CardQuizzlerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardQuizzlerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "card_quizzler_service.CardQuizzlerService",
	HandlerType: (*CardQuizzlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessQuizResult",
			Handler:    _CardQuizzlerService_ProcessQuizResult_Handler,
		},
		{
			MethodName: "GetOpenFolders",
			Handler:    _CardQuizzlerService_GetOpenFolders_Handler,
		},
		{
			MethodName: "GetOpenModules",
			Handler:    _CardQuizzlerService_GetOpenModules_Handler,
		},
		{
			MethodName: "GetUserFolders",
			Handler:    _CardQuizzlerService_GetUserFolders_Handler,
		},
		{
			MethodName: "GetFolderByID",
			Handler:    _CardQuizzlerService_GetFolderByID_Handler,
		},
		{
			MethodName: "GetFoldersByTitle",
			Handler:    _CardQuizzlerService_GetFoldersByTitle_Handler,
		},
		{
			MethodName: "CreateFolder",
			Handler:    _CardQuizzlerService_CreateFolder_Handler,
		},
		{
			MethodName: "UpdateFolder",
			Handler:    _CardQuizzlerService_UpdateFolder_Handler,
		},
		{
			MethodName: "DeleteFolder",
			Handler:    _CardQuizzlerService_DeleteFolder_Handler,
		},
		{
			MethodName: "DeleteModuleFromFolder",
			Handler:    _CardQuizzlerService_DeleteModuleFromFolder_Handler,
		},
		{
			MethodName: "AddFolderToUser",
			Handler:    _CardQuizzlerService_AddFolderToUser_Handler,
		},
		{
			MethodName: "GetUserModules",
			Handler:    _CardQuizzlerService_GetUserModules_Handler,
		},
		{
			MethodName: "GetDifficultModulesByUID",
			Handler:    _CardQuizzlerService_GetDifficultModulesByUID_Handler,
		},
		{
			MethodName: "GetModuleByID",
			Handler:    _CardQuizzlerService_GetModuleByID_Handler,
		},
		{
			MethodName: "GetModulesByTitle",
			Handler:    _CardQuizzlerService_GetModulesByTitle_Handler,
		},
		{
			MethodName: "CreateModule",
			Handler:    _CardQuizzlerService_CreateModule_Handler,
		},
		{
			MethodName: "CreateModuleInFolder",
			Handler:    _CardQuizzlerService_CreateModuleInFolder_Handler,
		},
		{
			MethodName: "UpdateModule",
			Handler:    _CardQuizzlerService_UpdateModule_Handler,
		},
		{
			MethodName: "DeleteModule",
			Handler:    _CardQuizzlerService_DeleteModule_Handler,
		},
		{
			MethodName: "AddModuleToUser",
			Handler:    _CardQuizzlerService_AddModuleToUser_Handler,
		},
		{
			MethodName: "AddModuleToFolder",
			Handler:    _CardQuizzlerService_AddModuleToFolder_Handler,
		},
		{
			MethodName: "UpdateTerm",
			Handler:    _CardQuizzlerService_UpdateTerm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "card-quizzler-service.proto",
}
